/* Generated By:JavaCC: Do not edit this line. LuaParserTokenManager.java */
package org.luaj.vm3.parser;

/** Token Manager. */
public class LuaParserTokenManager implements LuaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_2(0x40000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_11()
{
   return jjMoveNfa_11(6, 0);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (curChar == 93 && kind > 27)
                     kind = 27;
                  break;
               case 6:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_10(0x4000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_10(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_10(active0, 0x4000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_10(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa3_10(active0, 0x4000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_10(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa4_10(active0, 0x4000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_10(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_9(0x2000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_9(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_9(active0, 0x2000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_9(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa3_9(active0, 0x2000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_9(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         break;
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_8(0x1000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_8(active0, 0x1000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_8(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 24);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_7(0x800000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7800L) != 0L || (active1 & 0x2000L) != 0L)
            return 14;
         if ((active1 & 0x1008200L) != 0L)
            return 31;
         if ((active0 & 0x7ffffe0000000L) != 0L)
         {
            jjmatchedKind = 51;
            return 17;
         }
         if ((active0 & 0x103c0L) != 0L || (active1 & 0x80000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x103c0L) != 0L)
            return 6;
         if ((active0 & 0x7000L) != 0L)
            return 13;
         if ((active0 & 0x118080000000L) != 0L)
            return 17;
         if ((active0 & 0x7ee7f60000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 1;
            }
            return 17;
         }
         return -1;
      case 2:
         if ((active0 & 0x7e26b40000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 17;
         }
         if ((active0 & 0x6000L) != 0L)
            return 12;
         if ((active0 & 0x3c0L) != 0L)
            return 5;
         if ((active0 & 0xc1420000000L) != 0L)
            return 17;
         return -1;
      case 3:
         if ((active0 & 0x380L) != 0L)
            return 4;
         if ((active0 & 0x6622840000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 3;
            }
            return 17;
         }
         if ((active0 & 0x1804300000000L) != 0L)
            return 17;
         if ((active0 & 0x4000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x602200000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 17;
         }
         if ((active0 & 0x300L) != 0L)
            return 3;
         if ((active0 & 0x6020840000000L) != 0L)
            return 17;
         return -1;
      case 5:
         if ((active0 & 0x200L) != 0L)
            return 0;
         if ((active0 & 0x600200000000L) != 0L)
            return 17;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 17;
         }
         return -1;
      case 6:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 6;
            return 17;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 69);
      case 37:
         return jjStopAtPos(0, 87);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 42:
         return jjStopAtPos(0, 84);
      case 43:
         return jjStopAtPos(0, 82);
      case 44:
         return jjStopAtPos(0, 72);
      case 45:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x103c0L, 0x0L);
      case 46:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1008000L);
      case 47:
         return jjStopAtPos(0, 85);
      case 58:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 59:
         return jjStopAtPos(0, 70);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 61:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 62:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 91:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x7800L, 0x0L);
      case 93:
         return jjStopAtPos(0, 78);
      case 94:
         return jjStopAtPos(0, 86);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x700000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x600000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 80);
      case 125:
         return jjStopAtPos(0, 81);
      case 126:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      default :
         return jjMoveNfa_0(8, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3c0L, active1, 0L);
      case 46:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 58:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         return jjMoveStringLiteralDfa2_0(active0, 0x7000L, active1, 0L);
      case 91:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 17);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000420000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0xa5000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000040000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(2, 79);
         break;
      case 61:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L, active1, 0L);
      case 91:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x3c0L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 17);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 17);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800040000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 17);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 43, 17);
         return jjMoveStringLiteralDfa3_0(active0, 0x2204000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa4_0(active0, 0x4380L);
      case 91:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(3, 13);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x20040000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 17);
         return jjMoveStringLiteralDfa4_0(active0, 0x400200000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 17);
         break;
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 17);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa5_0(active0, 0x300L);
      case 91:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(4, 7);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 17);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 107:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 17);
         break;
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 17);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 17);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 91:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 17);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 17);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 66;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 46)
                     jjCheckNAdd(31);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 7;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 0:
               case 1:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
               case 10:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if (curChar == 46)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(10, 13);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(28, 22);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(28, 22);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(29, 22);
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(31, 32);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 37:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 39:
                  jjCheckNAddStates(7, 9);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 17);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 48:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  break;
               case 49:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 50:
                  if (curChar == 39 && kind > 62)
                     kind = 62;
                  break;
               case 52:
                  jjCheckNAddStates(4, 6);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(0, 3);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 63:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(64, 32);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(64, 32);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(65, 32);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(17);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 2:
                  if (curChar == 91 && kind > 10)
                     kind = 10;
                  break;
               case 6:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 11:
                  if (curChar == 91 && kind > 15)
                     kind = 15;
                  break;
               case 15:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(17);
                  break;
               case 19:
                  if ((0x100000001000000L & l) != 0L)
                     jjAddStates(30, 31);
                  break;
               case 21:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 22:
                  if ((0x1002000010020L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 25:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddStates(10, 13);
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 28:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(28, 22);
                  break;
               case 29:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAddTwoStates(29, 22);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if (curChar == 92)
                     jjAddStates(36, 38);
                  break;
               case 39:
                  jjCheckNAddStates(7, 9);
                  break;
               case 40:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 51:
                  if (curChar == 92)
                     jjAddStates(39, 41);
                  break;
               case 52:
                  jjCheckNAddStates(4, 6);
                  break;
               case 53:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
               case 39:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(7, 9);
                  break;
               case 49:
               case 52:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 66 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(4, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     jjCheckNAddStates(42, 44);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  kind = 17;
                  jjCheckNAddStates(42, 44);
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 2:
                  if (curChar == 10 && kind > 17)
                     kind = 17;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  kind = 17;
                  jjCheckNAddStates(42, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjCheckNAddStates(42, 44);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_6()
{
   return jjMoveNfa_6(6, 0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (curChar == 93 && kind > 22)
                     kind = 22;
                  break;
               case 6:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_5(0x200000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_5(active0, 0x200000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa3_5(active0, 0x200000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa4_5(active0, 0x200000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(4, 21);
         break;
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_4(0x100000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_4(active0, 0x100000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa3_4(active0, 0x100000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(3, 20);
         break;
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_3(0x80000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 93:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      default :
         return 3;
   }
   return 3;
}
static final int[] jjnextStates = {
   62, 63, 65, 32, 49, 50, 51, 36, 37, 38, 26, 27, 29, 22, 36, 37, 
   38, 46, 36, 47, 37, 38, 49, 50, 51, 59, 49, 60, 50, 51, 20, 25, 
   23, 24, 33, 34, 39, 40, 45, 52, 53, 58, 0, 1, 3, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\141\156\144", "\142\162\145\141\153", "\144\157", "\145\154\163\145", 
"\145\154\163\145\151\146", "\145\156\144", "\146\141\154\163\145", "\146\157\162", 
"\146\165\156\143\164\151\157\156", "\147\157\164\157", "\151\146", "\151\156", "\154\157\143\141\154", 
"\156\151\154", "\156\157\164", "\157\162", "\162\145\164\165\162\156", 
"\162\145\160\145\141\164", "\164\150\145\156", "\164\162\165\145", "\165\156\164\151\154", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\72\72", null, null, null, "\43", "\73", "\75", "\54", "\56", "\72", "\50", 
"\51", "\133", "\135", "\56\56\56", "\173", "\175", "\53", "\55", "\52", "\57", 
"\136", "\45", "\56\56", "\74", "\74\75", "\76", "\76\75", "\75\75", "\176\75", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_LC0",
   "IN_LC1",
   "IN_LC2",
   "IN_LC3",
   "IN_LCN",
   "IN_LS0",
   "IN_LS1",
   "IN_LS2",
   "IN_LS3",
   "IN_LSN",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x601fffffef800001L, 0x7fffffe2L, 
};
static final long[] jjtoSkip = {
   0x7e003eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x7e0000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1001ffc0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[66];
private final int[] jjstateSet = new int[132];
private final StringBuffer jjimage = new StringBuffer();
private StringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public LuaParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public LuaParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 66; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 12 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 17;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 28)
         {
            jjmatchedKind = 28;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
